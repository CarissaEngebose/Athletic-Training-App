/*
    Date: 12/10/2024
    Description: AthleteFormInformationEdit screen
    Bugs: None known
    Reflection: This was one of the easier screens. The information box was the hardest to get 
                to look right, but it wasn't too bad. 
                I also just had to change the comment boxes to be editable and add a save changes button.
*/

using System.Text.RegularExpressions;

namespace RecoveryAT;

public partial class AthleteFormInformationEdit : ContentPage
{
    // Business logic layer instance for accessing and modifying application data
    private readonly IBusinessLogic _businessLogic;

    // Current athlete form being edited
    private AthleteForm _currentForm;

    // List of contacts associated with the current form
    private List<AthleteContact> _currentContacts;

    /// <summary>
    /// Constructor for the AthleteFormInformationEdit screen.
    /// Initializes the screen with the current form data and sets up the BusinessLogic instance.
    /// </summary>
    /// <param name="form">The athlete form to be edited.</param>
    public AthleteFormInformationEdit(AthleteForm form)
    {
        InitializeComponent();

        // Initialize the business logic layer
        _businessLogic = new BusinessLogic(
                         new ContactsDatabase(),
                         new FormsDatabase(),
                         new UsersDatabase(),
                         new SearchDatabase(),
                         new Database());

        // Store the current form
        _currentForm = form;

        // Set up data binding for the form fields
        BindingContext = _currentForm;

        // Initialize the TreatmentType and Status fields with current values
        TreatmentType.SelectedItem = _currentForm.TreatmentType;
        StatusPicker.SelectedItem = _currentForm.Status;

        // Load and display contact information associated with the form
        LoadContactInformation();
    }

    /// <summary>
    /// Loads contact information associated with the current form and displays it in the UI.
    /// </summary>
    private void LoadContactInformation()
    {
        if (_currentForm.FormKey.HasValue)
        {
            // Fetch contacts using the business logic layer
            _currentContacts = _businessLogic.SelectContactsByFormKey(_currentForm.FormKey.Value).ToList();

            // If there is at least one contact, display the primary contact's details
            if (_currentContacts.Count > 0)
            {
                var primaryContact = _currentContacts[0];

                // Display the contact type and phone number in the input fields
                ContactTypeEntry.Text = primaryContact.ContactType;
                PhoneNumberEntry.Text = primaryContact.PhoneNumber;
            }
        }
    }

    /// <summary>
    /// Handles the event when the "Save Changes" button is clicked.
    /// Validates input, updates form and contact details, and saves changes to the database.
    /// </summary>
    /// <param name="sender">The object that triggered the event.</param>
    /// <param name="e">Event arguments.</param>
    public async void OnSaveChangesClicked(object sender, EventArgs e)
    {
        // Retrieve and validate the phone number input
        var phoneNumber = PhoneNumberEntry.Text;
        if (!string.IsNullOrEmpty(phoneNumber) && !IsValidPhoneNumber(phoneNumber))
        {
            await DisplayAlert("Invalid Input", "Please enter a valid phone number.", "OK");
            return;
        }

        // Update form details from the input fields
        _currentForm.TreatmentType = (string)TreatmentType.SelectedItem;
        _currentForm.Status = (string)StatusPicker.SelectedItem;

        // Update existing contact or add a new contact if none exist
        if (_currentContacts.Count > 0)
        {
            // Update the primary contact's details
            _currentContacts[0].ContactType = string.IsNullOrWhiteSpace(ContactTypeEntry.Text)
                ? _currentContacts[0].ContactType
                : ContactTypeEntry.Text;

            _currentContacts[0].PhoneNumber = string.IsNullOrWhiteSpace(PhoneNumberEntry.Text)
                ? _currentContacts[0].PhoneNumber
                : phoneNumber;
        }
        else
        {
            // Insert a new contact if none exist
            var newContact = new AthleteContact(
                contactID: 0, // Contact ID will be auto-generated by the database
                formKey: _currentForm.FormKey.Value,
                contactType: ContactTypeEntry.Text ?? "Unknown",
                phoneNumber: phoneNumber
            );

            // Save the new contact to the database
            var insertResult = _businessLogic.InsertContact(newContact.FormKey, newContact.ContactType, newContact.PhoneNumber);

            // Handle potential errors during contact insertion
            if (!insertResult.Contains("successfully"))
            {
                await DisplayAlert("Error", "Failed to add new contact. Please try again.", "OK");
                return;
            }

            // Add the new contact to the local list
            _currentContacts.Add(newContact);
        }

        // Save changes to the form and its contacts
        var resultMessage = _businessLogic.SaveUpdatedForm(_currentForm, _currentContacts);

        // Display the result message to the user
        await DisplayAlert("Save Status", resultMessage, "OK");

        // Navigate back to the previous screen if the save was successful
        if (resultMessage.Contains("successfully"))
        {
            await Navigation.PopAsync();
        }
    }

    /// <summary>
    /// Validates the format of a phone number using a regular expression.
    /// </summary>
    /// <param name="phoneNumber">The phone number to validate.</param>
    /// <returns>True if the phone number is valid, otherwise false.</returns>
    private bool IsValidPhoneNumber(string phoneNumber)
    {
        // Regex pattern for validating phone numbers in the format 123-456-7890
        var phonePattern = @"^\d{3}-\d{3}-\d{4}$";
        return Regex.IsMatch(phoneNumber, phonePattern);
    }
}
